$(function(n) {
    n.fn.hScroll = function(t) {
        t = t || 120;
        n(this).bind("DOMMouseScroll mousewheel", function(i) {
            var r = i.originalEvent
              , f = r.detail ? r.detail * -t : r.wheelDelta
              , u = n(this).scrollLeft();
            u += f > 0 ? -t : t;
            n(this).scrollLeft(u);
            i.preventDefault()
        })
    }
});
$(function() {
    general.init();
    navbar.init();
    anim.init();
    statusMessage.init()
  
});
var general = {
    init: function() {
        $(".logout-btn").click(function() {
            var n = $("#logoutForm");
            n !== null && $("#logoutForm").submit()
        });
        $('[data-toggle="tooltip"]').tooltip({
            container: "body"
        });
        $('[data-toggle="popover"]').popover({
            container: "body"
        })
    }
}
  , anim = {
    lastScrollY: 0,
    ticking: !1,
    _this: null,
    elements: null,
    init: function() {
        _this = this;
        _this.elements = $("[data-animate]");
        window.addEventListener("scroll", _this.onScroll, !1);
        _this.update()
    },
    onScroll: function() {
        _this.lastScrollY = window.scrollY;
        _this.requestTick()
    },
    requestTick: function() {
        _this.ticking || (requestAnimationFrame(_this.update),
        _this.ticking = !0)
    },
    update: function() {
        for (var n, t = _this.elements.length - 1; t >= 0; t--)
            (n = $(_this.elements[t]),
            n.hasClass(n.data("animate"))) || _this.isInViewport(n) && _this.triggerAnimate(n);
        _this.ticking = !1
    },
    isInViewport: function(n) {
        var t = n.offset().top
          , i = n.offset().top + n.outerHeight()
          , r = $(window).scrollTop() + $(window).height()
          , u = $(window).scrollTop();
        return r > t && u < i
    },
    triggerAnimate: function(n) {
        var r = n.data("animate")
          , u = n.data("animate-infinite") || null
          , t = n.data("animate-delay") || null
          , i = n.data("animate-duration") || null;
        u !== null && n.addClass("infinite");
        t !== null && n.css({
            "-webkit-animation-delay": t + "s",
            "-moz-animation-delay": t + "s",
            "animation-delay": t + "s"
        });
        i !== null && n.css({
            "-webkit-animation-duration": i + "s",
            "-moz-animation-duration": i + "s",
            "animation-duration": i + "s"
        });
        n.addClass("animated " + r).one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function() {
            n.addClass("animated-end")
        })
    }
}
  , navbar = {
    init: function() {
        this.dropdownHover();
        this.transparentFixed();
        $(".navbar-nav .dropdown-item").click(function(n) {
            n.stopPropagation()
        });
        $(".dropdown-submenu .dropdown-toggle").click(function(n) {
            n.preventDefault();
            $(this).parent().toggleClass("show");
            $(this).siblings(".dropdown-menu").toggleClass("show")
        });
        this.fixedBottom()
    },
    dropdownHover: function() {
        var n = $(".navbar-nav .dropdown");
        n.each(function() {
            var n = $(this);
            n.hover(function() {
                n.addClass("show")
            }, function() {
                n.removeClass("show")
            })
        })
    },
    transparentFixed: function() {
        var n = $(".navbar"), t, i;
        n.hasClass("bg-transparent") && n.hasClass("fixed-top") && (t = n.offset().top + 1,
        i = function() {
            var i = window.scrollY || window.pageYOffset;
            i >= t && n.hasClass("bg-transparent") ? n.removeClass("bg-transparent") : i < t && !n.hasClass("bg-transparent") && n.addClass("bg-transparent")
        }
        ,
        $(window).scroll(i))
    },
    fixedBottom: function() {
        if ($navbar = $(".navbar"),
        $navbar.hasClass("navbar-fixed-bottom"))
            var n = $navbar.offset().top + 1
              , t = function() {
                var t = window.scrollY || window.pageYOffset;
                t >= n && !$navbar.hasClass("navbar-fixed-bottom--stick") ? $navbar.addClass("navbar-fixed-bottom--stick") : t < n && $navbar.hasClass("navbar-fixed-bottom--stick") && $navbar.removeClass("navbar-fixed-bottom--stick")
            };
        $(window).scroll(t)
    }
}
  , changelog = {
    init: function() {
        $("#changelog-select").on("change", function() {
            location.href = "/changelog/" + $(this).val()
        })
    }
}
  , statusMessage = {
    init: function() {
        $("#alert-container").on("click", ".alert", function() {
            $(this).hide("fast")
        })
    },
    show: function(n, t, i) {
        var r = $("#alert-container");
        i ? r.html('<div class="container"><div class="alert text-lg-center"><i class="fa fa-' + t.Icon + " alert-icon " + t.Type + '"><\/i>' + n + "<\/div><\/div>") : r.append('<div class="container"><div class="alert text-lg-center"><i class="fa fa-' + t.Icon + " alert-icon " + t.Type + '"><\/i>' + n + "<\/div><\/div>")
    },
    showSuccess: function(n, t) {
        this.show(n, {
            Type: "success",
            Icon: "check"
        }, t)
    },
    showError: function(n, t) {
        this.show(n, {
            Type: "error",
            Icon: "warning"
        }, t)
    },
    showResponse: function(n, t) {
        var i = {
            Type: n.IsErrorResponse ? "error" : "success",
            Icon: n.IsErrorResponse ? "warning" : "check"
        };
        this.show(n.Message, i, t)
    },
    showJson: function(n) {
        this.show(n.Message, n.Options)
    }
}
  , tooltips = {
    init: function(n) {
        var t, r, i;
        typeof $WowheadPower == "undefined" && (t = document.createElement("script"),
        $("head").append(t),
        r = {
            hide: {
                sellprice: !0,
                reagents: !0
            }
        },
        i = document.createElement("script"),
        i.innerHTML = "var aowow_tooltips = " + JSON.stringify(n ? n : r),
        $("head").append(i))
    },
    refreshLinks: function() {
        typeof $WowheadPower != "undefined" && window.$WowheadPower.refreshLinks()
    }
}

window.utils = {
    isFirefox: function() {
        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1
    },
    isSafari: function() {
        return navigator.userAgent.toLowerCase().indexOf("safari") > -1
    },
    isMobile: function() {
        return window.innerWidth <= 1024 ? !0 : !1
    },
    getModelViewerAspect: function() {
        return window.innerWidth < 568 ? window.innerWidth < 374 ? 1.1 : 1 : 1.4
    }
};
Utilities = function() {
    this.ajaxDialogResponseTemplate = null
}
;
Utilities.prototype = {
    ajaxGet: function(n, t) {
        this.ajaxRequest(n, "GET", null, t, !1)
    },
    ajaxPost: function(n, t, i) {
        this.ajaxRequest(n, "POST", t, i, !0)
    },
    ajaxRequest: function(n, t, i, r, u) {
        $.ajax({
            url: n,
            headers: u ? {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            } : null,
            data: i,
            type: t,
            error: function(n) {
                r(n.responseJSON)
            },
            success: function(n) {
                r(n)
            }
        })
    },
    ajaxDialog: function(n) {
        var r = this, t = $("#ajax-dialog"), o = t.find(".modal-dialog"), s = t.find(".modal-footer"), h = t.find(".modal-body"), u = t.find(".modal-section"), f = t.find("#action-button"), c = t.find(".close"), i, e;
        o.removeClass("modal-sm").removeClass("modal-lg");
        n.size && o.addClass("modal-" + n.size);
        s.removeClass("text-right");
        n.buttonRight && s.addClass("text-right");
        u.hide();
        n.showSection && (u.html(n.sectionHtml),
        u.show());
        t.find(".modal-title").text(n.title);
        h.html(n.body);
        f.text(n.actionButtonText);
        i = t.modal();
        r.ajaxDialogResponseTemplate === null && (r.ajaxDialogResponseTemplate = Handlebars.compile($("#ajax-dialog-response-tmpl").html()));
        i.off("click", "#action-button");
        n.hideActionButton ? f.hide() : f.show();
        e = Ladda.create(document.querySelector("#action-button"));
        i.on("hide.bs.modal", function(n) {
            if (e.isLoading())
                return n.preventDefault(),
                n.stopPropagation(),
                !1
        });
        i.on("click", "#action-button", function() {
            e.start();
            c.hide();
            var t = function(t) {
                if (e.remove(),
                c.show(),
                f.hide(),
                u.hide(),
                h.html(r.ajaxDialogResponseTemplate(t)),
                !t.IsErrorResponse && n.request.onSuccessCloseCallback)
                    i.one("hide.bs.modal", function() {
                        n.request.onSuccessCloseCallback(t)
                    })
            };
            r.ajaxRequest(n.request.url, n.request.method, n.request.data, t, n.request.method === "POST")
        })
    },
    renderTemplate: function(n, t, i, r, u) {
        i instanceof jQuery || (i = i.substring(0, 1) === "#" ? i : "#" + i,
        i = $(i));
        n instanceof jQuery || (n = n.substring(0, 1) === "#" ? n : "#" + n,
        n = $(n));
        var e = Handlebars.compile(n.html())
          , f = e(t);
        r ? i.append(f) : u ? i.after(f) : i.html(f)
    },
    clearBsAlertMessage: function() {
        $("#bs-alert-content").remove()
    },
    showBsAlertMessage: function(n, t, i) {
        var r = this
          , u = t ? "fa fa-check" : "fa fa-exclamation-circle"
          , f = {
            Message: n,
            Type: t ? "warning" : "success",
            Icon: u
        };
        r.renderTemplate("#bs-alert-tmpl", f, i)
    },
    showBsAlertMessageFromResponse: function(n, t) {
        var i = this
          , r = n.IsErrorResponse ? "fa fa-exclamation-circle" : "fa fa-check"
          , u = {
            Message: n.Message,
            Type: n.IsErrorResponse ? "warning" : "success",
            Icon: r
        };
        i.renderTemplate("#bs-alert-tmpl", u, t)
    },
    initializeTooltips: function() {
        $('[data-toggle="tooltip"]').tooltip({
            container: "body"
        })
    }
};
Utilities = new Utilities;
DialogUtilities = function() {}
;
DialogUtilities.prototype = {
    showDialog: function(n, t, i, r) {
        var u = $("#modal-default"), e, o, s, f;
        if (u.find(".modal-title").text(n),
        u.find(".modal-body").html(t),
        e = u.find(".modal-dialog"),
        e.removeClass("modal-sm").removeClass("modal-lg"),
        r.size && e.addClass("modal-" + r.size),
        o = u.find(".modal-footer"),
        o.removeClass("right"),
        r.buttonsRight && o.addClass("right"),
        s = u.modal(),
        s.off("click", "#action-button"),
        f = u.find("#action-button"),
        f.text(r.actionButtonText ? r.actionButtonText : "Save changes"),
        r.hideActionButton ? f.hide() : f.show(),
        i)
            s.on("click", "#action-button", function() {
                f.prop("disabled", !0);
                i()
            })
    },
    unlockActionButton: function() {
        $("#modal-default #action-button").prop("disabled", !1)
    },
    setDialogActionButtonVisible: function(n) {
        var t = $("#modal-default #action-button");
        n ? t.show() : t.hide()
    },
    closeDialog: function() {
        $("#modal-default #close-button").click()
    }
};
DialogUtilities = new DialogUtilities;
CharacterServices = function() {
    this.purchaseUrl = null;
    this.currentRequestData = null;
    this.characters = null
}
;
CharacterServices.ActionType = {
    EnableDualSpec: 1,
    SwitchSpecialization: 2,
    NameChange: 3,
    ExpRateChange: 4,
    CharacterRestoration: 5,
    Unstuck: 6,
    FactionChange: 7,
    RaceChange: 8,
    AppearanceChange: 9
};
CharacterServices.prototype = {
    initialize: function() {
        var n = this
          , t = Handlebars.compile($("#confirm-tmpl").html());
        $("#ajax-dialog").on("change", "#select-val", function(t) {
            n.currentRequestData.selectValue = t.target.value
        });
        $(".character-card .action-link").on("click", function(i) {
            var o;
            i.preventDefault();
            var s = $(this)
              , e = $.Enumerable.From(n.characters)
              , r = e.FirstOrDefault(null, n=>n.Guid == s.data("guid"))
              , f = n.getActionProperties(s)
              , u = {
                characterName: r.Name,
                action: f.actionType
            };
            switch (f.actionType) {
            case CharacterServices.ActionType.SwitchSpecialization:
                u.newSpec = f.newSpec;
                break;
            case CharacterServices.ActionType.ExpRateChange:
                u.availableRates = [5, 4, 3, 2, 1, 0];
                r.Faction === 1 && u.availableRates.unshift(6);
                u.currentRate = f.currentXpRate;
                break;
            case CharacterServices.ActionType.FactionChange:
                u.availableCharacters = e.Where(n=>n.Faction !== r.Faction && n.Class === r.Class).ToArray();
                u.selectedCharacter = r;
                f.hideActionButton = u.availableCharacters.length < 1;
                break;
            case CharacterServices.ActionType.RaceChange:
                u.availableCharacters = e.Where(n=>n.Guid !== r.Guid && n.Faction === r.Faction && n.Class === r.Class).ToArray();
                f.hideActionButton = u.availableCharacters.length < 1;
                break;
            case CharacterServices.ActionType.AppearanceChange:
                u.availableCharacters = e.Where(n=>n.Guid !== r.Guid && n.Race === r.Race && n.Class === r.Class).ToArray();
                f.hideActionButton = u.availableCharacters.length < 1
            }
            o = {
                title: f.dialogTitle,
                body: t(u),
                actionButtonText: f.actionButtonText,
                hideActionButton: f.hideActionButton,
                request: {
                    method: "POST",
                    url: n.purchaseUrl,
                    data: {
                        characterGuid: r.Guid
                    },
                    onSuccessCloseCallback: f.onSuccessCloseCallback
                }
            };
            n.currentRequestData = o.request.data;
            Utilities.ajaxDialog(o);
            $("#ajax-dialog #select-val").change()
        })
    },
    getActionProperties: function(n) {
        var i = n.data("action"), t;
        switch (i) {
        case "enableDualSpec":
            return {
                actionType: CharacterServices.ActionType.EnableDualSpec,
                dialogTitle: "Enable Dual Specialization",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "switchSpec":
            return t = n.find(".new-spec"),
            {
                actionType: CharacterServices.ActionType.SwitchSpecialization,
                dialogTitle: "Switch Specialization",
                actionButtonText: "Confirm",
                newSpec: t.text(),
                onSuccessCloseCallback: ()=>{
                    n.parent().find(".char-service-status .current-spec").text("(" + t.text() + ")"),
                    t.text(t.text() === "Primary" ? "Secondary" : "Primary")
                }
            };
        case "nameChange":
            return {
                actionType: CharacterServices.ActionType.NameChange,
                dialogTitle: "Change Name",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "expRateChange":
            return {
                actionType: CharacterServices.ActionType.ExpRateChange,
                dialogTitle: "Change Experience Rate",
                actionButtonText: "Confirm",
                currentXpRate: n.data("curr-xp"),
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "charRestore":
            return {
                actionType: CharacterServices.ActionType.CharacterRestoration,
                dialogTitle: "Restore deleted character",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "unstuck":
            return {
                actionType: CharacterServices.ActionType.Unstuck,
                dialogTitle: "Character Unstuck",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "factionChange":
            return {
                actionType: CharacterServices.ActionType.FactionChange,
                dialogTitle: "Faction change",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "raceChange":
            return {
                actionType: CharacterServices.ActionType.RaceChange,
                dialogTitle: "Race change",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            };
        case "appearanceChange":
            return {
                actionType: CharacterServices.ActionType.AppearanceChange,
                dialogTitle: "Appearance change",
                actionButtonText: "Confirm",
                onSuccessCloseCallback: ()=>{
                    location.reload()
                }
            }
        }
        return {}
    }
};
Donate = function() {
    this.createUrl = null;
    this.stripePk = null;
    this.stripe = null;
    this.l = null
}
;
Donate.prototype = {
    initialize: function() {
        var n = this;
        n.stripe = Stripe(n.stripePk);
        $(".donation-offers").on("click", ".choose a", function(n) {
            n.preventDefault();
            var t = $(this).closest(".offer");
            $(".offer").removeClass("selected");
            t.addClass("selected");
            $("#checkout-price").text(t.data("price"))
        });
        $("#proceed-btn").on("click", function() {
            n.l = Ladda.create(document.querySelector("#proceed-btn")).start();
            n.createSess()
        })
    },
    createSess: function() {
        var n = this
          , t = {
            option: $(".selected:first").data("id")
        }
          , i = function(t) {
            n.l.remove();
            t.IsErrorResponse ? ($("#response-alert-container").html('<p class="text-danger"><strong>' + t.Message + "<\/strong><\/p>"),
            $("#proceed-btn").remove()) : n.stripe.redirectToCheckout({
                sessionId: t.Data
            }).then(function(n) {
                statusMessage.showError(n.error.message)
            })
        };
        Utilities.ajaxPost(n.createUrl, t, i)
    }
};
DonationHistory = function() {
    this.transactions = null;
    this.transenum = null
}
;
DonationHistory.prototype = {
    initialize: function() {
        var n = this;
        if (n.renderTransactions(),
        n.stripePk !== "") {
            n.stripe = Stripe(n.stripePk);
            $("#history-table").on("click", "tr a", function(t) {
                t.preventDefault();
                var r = $(this)
                  , i = r.closest("td").data("sess");
                i && (r.hasClass("del") ? n.cancelPay(i) : n.resumePay(i))
            })
        }
    },
    resumePay: function(n) {
        this.stripe.redirectToCheckout({
            sessionId: n
        }).then(function(n) {
            statusMessage.showError(n.error.message)
        })
    },
    cancelPay: function(n) {
        var t = this;
        Utilities.ajaxPost(this.cancelUrl, {
            sessionId: n
        }, function(n) {
            n.IsErrorResponse ? statusMessage.showError(n.Message) : (t.transactions = $.Enumerable.From(t.transactions).Where(function(t) {
                return t.SessionId !== n.Data.SessionId
            }).ToArray(),
            t.transactions.push(n.Data),
            t.renderTransactions(),
            statusMessage.showSuccess(n.Message, !0))
        })
    },
    renderTransactions: function() {
        var n = Handlebars.compile($("#h-row-tmpl").html());
        this.transactions = $.Enumerable.From(this.transactions).OrderByDescending("x => x.Created").ToArray();
        $("#history-table tbody").html(n(this.transactions))
    }
};
Store = function() {
    this.purchaseUrl = null;
    this.characters = null;
    this.currentRequestData = null;
    this.charSelItemTmpl = null;
    this.dialogBodyTmpl = null;
    this.dialogSectionTmpl = null
}
;
Store.prototype = {
    initialize: function() {
        var n = this;
        tooltips.init({
            hide: {
                sellprice: !0
            }
        });
        $(".store-items .card").tilt({
            maxTilt: 2,
            scale: 1.045
        });
        $(".store-items .card, .store-items .store-item").on("click", function(t) {
            t.preventDefault();
            n.showItemDetailsDialog($(this))
        });
        $("#ajax-dialog").on("change", "#character-sel", function(t) {
            n.currentRequestData.characterGuid = t.target.value
        })
    },
    showItemDetailsDialog: function(n) {
        var t = this, i, r;
        t.dialogBodyTmpl || (t.dialogBodyTmpl = Handlebars.compile($("#confirm-tmpl").html()));
        t.dialogSectionTmpl || (t.dialogSectionTmpl = Handlebars.compile($("#confirm-section-tmpl").html()));
        i = {
            name: n.data("name"),
            quality: n.data("quality"),
            price: n.data("price"),
            itemid: n.data("itemid"),
            itemIconName: n.data("item-icon-name")
        };
        r = {
            title: "Purchase item",
            body: t.dialogBodyTmpl(i),
            sectionHtml: t.dialogSectionTmpl(i),
            actionButtonText: "Confirm",
            request: {
                method: "POST",
                url: t.purchaseUrl,
                data: {
                    storeEntryId: n.data("se")
					
                },
                onSuccessCloseCallback: n=>{
                    $("#user-coins").text(n.Data.Coins)
                }
            },
            showSection: !0
        };
        t.currentRequestData = r.request.data;
        Utilities.ajaxDialog(r);
        t.initSelect()
    },
    initSelect: function() {
        var n = this;
        $("#character-sel").select2({
            minimumResultsForSearch: Infinity,
            placeholder: "Select character",
            data: n.characters,
            templateResult: n.formatCharacter,
            templateSelection: n.formatCharacterSelection,
            escapeMarkup: function(n) {
                return n
            }
        }).trigger("change")
    },
    formatCharacter: function(n) {
        var t = this;
        return n.loading ? "Fetching characters..." : (t.charSelItemTmpl || (t.charSelItemTmpl = Handlebars.compile($("#char-sel-item-tmpl").html())),
        $(t.charSelItemTmpl(n)))
    },
    formatCharacterSelection: function(n) {
        return n.text + " (" + n.level + " <span class='class-" + n.className.toLowerCase() + "'>" + n.className + "<\/span>)"
    }
};
ArenaHistory = function() {
    this.matches = null;
    this.getMatchDetailsUrl = null;
    this.pendingRequest = !1
}
;
ArenaHistory.prototype = {
    initialize: function() {
        var n = this;
        n.matches = [];
        $("#match-history-table").on("click", ".match-details", function(t) {
            var r, i, u;
            if (t.preventDefault(),
            r = $(this).closest("tr"),
            i = r.data("id"),
            r.hasClass("toggled")) {
                $(".details-" + i).remove();
                r.removeClass("toggled");
                return
            }
            if (u = $.Enumerable.From(n.matches).FirstOrDefault(null, "x => x.id == " + i),
            u !== null) {
                n.appendDetailsToRow(r, i);
                return
            }
            n.pendingRequest || (n.pendingRequest = !0,
            Utilities.ajaxGet(n.getMatchDetailsUrl + "&matchId=" + i, function(t) {
                n.pendingRequest = !1;
                t !== undefined && (n.matches.push({
                    id: i,
                    html: t
                }),
                n.appendDetailsToRow(r, i))
            }))
        });
        $("#match-history-table").DataTable({
            iDisplayLength: 25,
            lengthChange: !1,
            searching: !1,
            ordering: !1
        })
    },
    appendDetailsToRow: function(n, t) {
        var i = this;
        n.after($.Enumerable.From(i.matches).First("x => x.id == " + t).html);
        n.addClass("toggled")
    }
};
ArmorySearch = function() {
    this.characterCount = null;
    this.guildCount = null;
    this.teamCount = null
}
;
ArmorySearch.prototype = {
    initialize: function() {
        var n = this
          , t = {
            iDisplayLength: 10,
            lengthChange: !1,
            searching: !1,
            ordering: !1
        };
        n.characterCount > 0 && $("#char").DataTable(t);
        n.guildCount > 0 && $("#guild").DataTable(t);
        n.teamCount > 0 && $("#team").DataTable(t)
    }
};